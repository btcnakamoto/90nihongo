import { useState, useEffect, useCallback, useMemo, memo, Suspense } from 'react';
import { useLocation } from 'react-router-dom';
import { useSidebar } from '@/contexts/SidebarContext';
import { cn } from '@/lib/utils';
import { 
  contentService, 
  type ContentStats, 
  type CourseProgressData, 
  type ContentTypeData, 
  type RecentActivity, 
  type Course, 
  type LearningMaterial, 
  type Vocabulary, 
  type Exercise,
  type CreateCourseData,
  type CreateMaterialData,
  type CreateVocabularyData,
  type CreateExerciseData
} from '@/services/contentService';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import {
  BookOpen,
  Plus,
  Upload,
  RefreshCw,
  BarChart3,
  Layers,
  Target,
  TrendingUp
} from 'lucide-react';
import AdminSidebar from '@/components/admin/AdminSidebar';
import TopNavbar from '@/components/admin/TopNavbar';
import PageHeader from '@/components/admin/PageHeader';
import StatsCard from '@/components/admin/StatsCard';
import { OptimizedCoursesTab, OptimizedMaterialsTab } from '@/components/admin/OptimizedContentTabs';
import { 
  ContentTypeSelector, 
  CourseForm, 
  MaterialForm, 
  VocabularyForm, 
  ExerciseForm 
} from '@/components/admin/ContentFormComponents';// 懒加载其他标签页组件const VocabularyTab = memo(() => <div>词汇管理标签页 - 待优化</div>);const ExercisesTab = memo(() => <div>练习题库标签页 - 待优化</div>);const AdminContentManagementOptimized = () => {
  const { isCollapsed } = useSidebar();
  const { toast } = useToast();
  const location = useLocation();
  const [loading, setLoading] = useState(true);
  
  // 根据路径确定初始活动标签页
  const getInitialTab = useCallback(() => {
    const path = location.pathname;
    if (path.includes('/courses')) return 'courses';
    if (path.includes('/materials')) return 'materials';
    if (path.includes('/vocabulary')) return 'vocabulary';
    if (path.includes('/exercises')) return 'exercises';
    return 'overview';
  }, [location.pathname]);

  const [activeTab, setActiveTab] = useState(getInitialTab());

  // 监听路径变化，自动切换标签页
  useEffect(() => {
    setActiveTab(getInitialTab());
  }, [getInitialTab]);

  // API数据状态
  const [stats, setStats] = useState<ContentStats | null>(null);
  const [courseProgressData, setCourseProgressData] = useState<CourseProgressData[]>([]);
  const [contentTypeData, setContentTypeData] = useState<ContentTypeData[]>([]);
  const [recentActivities, setRecentActivities] = useState<RecentActivity[]>([]);
  const [courses, setCourses] = useState<Course[]>([]);
  const [materials, setMaterials] = useState<LearningMaterial[]>([]);
  const [vocabulary, setVocabulary] = useState<Vocabulary[]>([]);
  const [exercises, setExercises] = useState<Exercise[]>([]);

  // 搜索和筛选状态
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState("all");
  const [filterStatus, setFilterStatus] = useState("all");
  const [filterLevel, setFilterLevel] = useState("all");

  // 分页状态
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(20);

  // 性能优化：防抖搜索
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");
  
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
      setCurrentPage(1); // 搜索时重置到第一页
    }, 300);
    return () => clearTimeout(timer);
  }, [searchTerm]);

  // 对话框状态
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [contentType, setContentType] = useState<'course' | 'material' | 'vocabulary' | 'exercise'>('course');
  const [saving, setSaving] = useState(false);
  const [uploading, setUploading] = useState(false);

  // 表单状态
  const [courseForm, setCourseForm] = useState<CreateCourseData>({
    title: "",
    description: "",
    day_number: 1,
    difficulty: "beginner",
    tags: [],
    is_active: false
  });

  const [materialForm, setMaterialForm] = useState<CreateMaterialData>({
    course_id: 0,
    title: "",
    type: "text",
    content: "",
    media_url: "",
    duration_minutes: 0,
    metadata: {}
  });

  const [vocabularyForm, setVocabularyForm] = useState<CreateVocabularyData>({
    word: "",
    reading: "",
    meaning: "",
    part_of_speech: "",
    example_sentence: "",
    example_reading: "",
    example_meaning: "",
    jlpt_level: "N5",
    tags: []
  });

  const [exerciseForm, setExerciseForm] = useState<CreateExerciseData>({
    course_id: 0,
    title: "",
    type: "vocabulary",
    question: "",
    options: ["", "", "", ""],
    correct_answer: "",
    explanation: "",
    points: 10
  });

  // 加载数据
  const loadData = useCallback(async () => {
    try {
      setLoading(true);
      
      const [statsResponse, coursesResponse, materialsResponse, vocabularyResponse, exercisesResponse] = await Promise.all([
        contentService.getStats(),
        contentService.getCourses(),
        contentService.getMaterials(),
        contentService.getVocabulary(),
        contentService.getExercises()
      ]);

      if (statsResponse.success) {
        setStats(statsResponse.data.stats);
        setCourseProgressData(statsResponse.data.course_progress_data);
        setContentTypeData(statsResponse.data.content_type_data);
        setRecentActivities(statsResponse.data.recent_activities);
      }

      if (coursesResponse.success) {
        setCourses(coursesResponse.data);
      }

      if (materialsResponse.success) {
        setMaterials(materialsResponse.data);
      }

      if (vocabularyResponse.success) {
        setVocabulary(vocabularyResponse.data);
      }

      if (exercisesResponse.success) {
        setExercises(exercisesResponse.data);
      }
    } catch (error) {
      console.error('Failed to load data:', error);
      toast({
        title: "加载失败",
        description: "无法加载内容数据，请稍后重试",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  // 工具函数
  const getContentTypeName = useCallback((type: string) => {
    const names = {
      course: '课程',
      material: '学习材料',
      vocabulary: '词汇',
      exercise: '练习题'
    };
    return names[type as keyof typeof names] || type;
  }, []);

  // 事件处理函数
  const handleCreateContent = useCallback((type: 'course' | 'material' | 'vocabulary' | 'exercise' = 'course') => {
    setContentType(type);
    setCreateDialogOpen(true);
  }, []);

  const handleFileUpload = useCallback(async (file: File) => {
    if (!file) return;
    
    try {
      setUploading(true);
      const fileType = file.type.startsWith('video') ? 'video' : 
                      file.type.startsWith('audio') ? 'audio' : 'image';
      
      const result = await contentService.uploadFile(file, fileType);
      
      if (result.success && result.url) {
        setMaterialForm(prev => ({ ...prev, media_url: result.url! }));
        toast({
          title: "上传成功",
          description: "文件已成功上传",
        });
      } else {
        throw new Error(result.message || '上传失败');
      }
    } catch (error) {
      console.error('Upload failed:', error);
      toast({
        title: "上传失败",
        description: "文件上传失败，请重试",
        variant: "destructive",
      });
    } finally {
      setUploading(false);
    }
  }, [toast]);

  const handleSaveContent = useCallback(async () => {
    try {
      setSaving(true);
      let result;

      switch (contentType) {
        case 'course':
          if (!courseForm.title || !courseForm.description) {
            throw new Error('请填写必要的课程信息');
          }
          result = await contentService.createCourse(courseForm);
          break;

        case 'material':
          if (!materialForm.title || !materialForm.content || !materialForm.course_id) {
            throw new Error('请填写必要的材料信息');
          }
          result = await contentService.createMaterial(materialForm);
          break;

        case 'vocabulary':
          if (!vocabularyForm.word || !vocabularyForm.reading || !vocabularyForm.meaning) {
            throw new Error('请填写必要的词汇信息');
          }
          result = await contentService.createVocabulary(vocabularyForm);
          break;

        case 'exercise':
          if (!exerciseForm.title || !exerciseForm.question || !exerciseForm.correct_answer) {
            throw new Error('请填写必要的练习题信息');
          }
          result = await contentService.createExercise(exerciseForm);
          break;

        default:
          throw new Error('未知的内容类型');
      }

      if (result && result.success) {
        toast({
          title: "创建成功",
          description: `${getContentTypeName(contentType)}已成功创建`,
        });
        setCreateDialogOpen(false);
        await loadData();
      } else {
        throw new Error(result?.message || '创建失败');
      }
    } catch (error: any) {
      console.error('Save failed:', error);
      toast({
        title: "创建失败",
        description: error.message || "创建内容失败，请重试",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  }, [contentType, courseForm, materialForm, vocabularyForm, exerciseForm, loadData, toast, getContentTypeName]);

  // 表单更新处理函数
  const handleCourseFormChange = useCallback((field: keyof CreateCourseData, value: any) => {
    setCourseForm(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleMaterialFormChange = useCallback((field: keyof CreateMaterialData, value: any) => {
    setMaterialForm(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleVocabularyFormChange = useCallback((field: keyof CreateVocabularyData, value: any) => {
    setVocabularyForm(prev => ({ ...prev, [field]: value }));
  }, []);

  const handleExerciseFormChange = useCallback((field: keyof CreateExerciseData, value: any) => {
    setExerciseForm(prev => ({ ...prev, [field]: value }));
  }, []);

  // 操作处理函数
  const handleEdit = useCallback((id: number) => {
    console.log('Edit:', id);
  }, []);

  const handleDelete = useCallback((id: number) => {
    console.log('Delete:', id);
  }, []);

  const handleView = useCallback((id: number) => {
    console.log('View:', id);
  }, []);

  if (loading) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <AdminSidebar activePath="/admin/content" />
        <div className={cn(
          "main-content flex-1 flex flex-col transition-all duration-300",
          isCollapsed && "collapsed"
        )}>
          <TopNavbar />
          <main className="flex-1 p-6 overflow-auto">
            <div className="flex items-center justify-center h-64">
              <RefreshCw className="h-8 w-8 animate-spin" />
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <AdminSidebar activePath="/admin/content" />
      <div className={cn(
        "main-content flex-1 flex flex-col transition-all duration-300",
        isCollapsed && "collapsed"
      )}>
        <TopNavbar />
        
        <main className="flex-1 p-6 overflow-auto">
          <PageHeader 
            title="内容管理" 
            description="管理90天日语学习课程、材料库和练习内容"
          >
            <Button onClick={() => handleCreateContent()} className="bg-blue-600 hover:bg-blue-700">
              <Plus className="h-4 w-4 mr-2" />
              创建内容
            </Button>
            <Button variant="outline">
              <Upload className="h-4 w-4 mr-2" />
              批量导入
            </Button>
          </PageHeader>

          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="overview">内容概览</TabsTrigger>
              <TabsTrigger value="courses">90天课程</TabsTrigger>
              <TabsTrigger value="materials">学习材料</TabsTrigger>
              <TabsTrigger value="vocabulary">词汇管理</TabsTrigger>
              <TabsTrigger value="exercises">练习题库</TabsTrigger>
            </TabsList>

            {/* 内容概览 */}
            <TabsContent value="overview" className="space-y-6">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <StatsCard
                  title="总课程数"
                  value={stats?.total_courses?.toString() || "0"}
                  icon={<BookOpen className="h-5 w-5" />}
                  trend={{ value: 8, isPositive: true }}
                />
                <StatsCard
                  title="学习材料"
                  value={stats?.total_materials?.toString() || "0"}
                  icon={<Layers className="h-5 w-5" />}
                  trend={{ value: 12, isPositive: true }}
                />
                <StatsCard
                  title="词汇总数"
                  value={stats?.total_vocabulary?.toString() || "0"}
                  icon={<Target className="h-5 w-5" />}
                  trend={{ value: 5, isPositive: true }}
                />
                <StatsCard
                  title="平均完成率"
                  value={`${stats?.average_completion || 0}%`}
                  icon={<TrendingUp className="h-5 w-5" />}
                  trend={{ value: 3.2, isPositive: true }}
                />
              </div>
            </TabsContent>

            {/* 90天课程管理 - 使用优化组件 */}
            <OptimizedCoursesTab
              courses={courses}
              searchTerm={debouncedSearchTerm}
              setSearchTerm={setSearchTerm}
              filterStatus={filterStatus}
              setFilterStatus={setFilterStatus}
              filterLevel={filterLevel}
              setFilterLevel={setFilterLevel}
              currentPage={currentPage}
              setCurrentPage={setCurrentPage}
              pageSize={pageSize}
              handleCreateContent={handleCreateContent}
              handleEdit={handleEdit}
              handleDelete={handleDelete}
              handleView={handleView}
            />

            {/* 学习材料管理 - 使用优化组件 */}            <OptimizedMaterialsTab              materials={materials}              searchTerm={debouncedSearchTerm}              setSearchTerm={setSearchTerm}              filterType={filterType}              setFilterType={setFilterType}              currentPage={currentPage}              setCurrentPage={setCurrentPage}              pageSize={pageSize}              handleCreateContent={handleCreateContent}              handleEdit={handleEdit}              handleDelete={handleDelete}              handleView={handleView}            />            {/* 其他标签页 - 懒加载 */}

            <TabsContent value="vocabulary" className="space-y-6">
              <Suspense fallback={<div>加载中...</div>}>
                <VocabularyTab />
              </Suspense>
            </TabsContent>

            <TabsContent value="exercises" className="space-y-6">
              <Suspense fallback={<div>加载中...</div>}>
                <ExercisesTab />
              </Suspense>
            </TabsContent>
          </Tabs>

          {/* 创建内容对话框 */}
          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>创建新{getContentTypeName(contentType)}</DialogTitle>
                <DialogDescription>
                  填写{getContentTypeName(contentType)}的相关信息
                </DialogDescription>
              </DialogHeader>
              
              <div className="space-y-6">
                <ContentTypeSelector 
                  contentType={contentType} 
                  onTypeChange={setContentType} 
                />

                {contentType === 'course' && (
                  <CourseForm 
                    form={courseForm}
                    onChange={handleCourseFormChange}
                  />
                )}

                {contentType === 'material' && (
                  <MaterialForm 
                    form={materialForm}
                    courses={courses}
                    uploading={uploading}
                    onChange={handleMaterialFormChange}
                    onFileUpload={handleFileUpload}
                  />
                )}

                {contentType === 'vocabulary' && (
                  <VocabularyForm 
                    form={vocabularyForm}
                    onChange={handleVocabularyFormChange}
                  />
                )}

                {contentType === 'exercise' && (
                  <ExerciseForm 
                    form={exerciseForm}
                    courses={courses}
                    onChange={handleExerciseFormChange}
                  />
                )}
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => setCreateDialogOpen(false)}>
                  取消
                </Button>
                <Button onClick={handleSaveContent} disabled={saving}>
                  {saving ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      创建中...
                    </>
                  ) : (
                    <>
                      <Plus className="h-4 w-4 mr-2" />
                      创建{getContentTypeName(contentType)}
                    </>
                  )}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </main>
      </div>
    </div>
  );
};

export default AdminContentManagementOptimized; 